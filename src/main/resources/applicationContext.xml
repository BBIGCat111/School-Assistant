<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:contex="http://www.springframework.org/schema/context"
       xmlns:mvc="http://www.springframework.org/schema/mvc"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc.xsd http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd">

        <contex:component-scan base-package="com.service"/>
        <contex:component-scan base-package="com.dao"/>
        <contex:component-scan base-package="com.controller"/>

        <mvc:annotation-driven/>

        <!-- 将MyBatis与Spring整合的配置 -->
        <!-- 1. 创建数据源 -->
        <contex:property-placeholder location="classpath:jdbc.properties"/>

        <bean id="dataSource" class="com.alibaba.druid.pool.DruidDataSource">
                <property name="url" value="${jdbc.url}"/>
                <property name="driverClassName" value="${jdbc.driver}"/>
                <property name="username" value="${jdbc.username}"/>
                <property name="password" value="${jdbc.password}"/>
        </bean>

        <!-- 2. 为了创建Dao代理对象，先创建SqlSessionFactory对象 -->
        <!--  SqlSessionFactoryBean: 创建SqlSessionFactory对象的工具 -->
        <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
                <!-- 注入数据源 -->
                <property name="dataSource" ref="dataSource"/>
                <property name="mapperLocations" value="mapper"
        </bean>

        <!-- 3. 扫描Dao接口所在包，扫描后用于创建Dao代理对象，把代理点对象放入IOC容器 -->
        <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
        <!-- Dao扫描目录 -->
                <property name="basePackage" value="com.dao"/>
        </bean>


</beans>